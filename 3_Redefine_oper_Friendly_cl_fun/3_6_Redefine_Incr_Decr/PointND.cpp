/*
    üîÅ –ò–¥–∏–æ–º–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±–º–µ–Ω–∞ (Copy-and-Swap Idiom) –≤ C++
    –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è (operator=) –¥–ª—è –∫–ª–∞—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–ø—Ä–∞–≤–ª—è—é—Ç —Ä–µ—Å—É—Ä—Å–∞–º–∏
        (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç—å—é).
    üí° –ò–¥–µ—è: —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –ø–æ—Ç–æ–º –æ–±–º–µ–Ω—è—Ç—å
    –¢—ã —Å–æ–∑–¥–∞—ë—à—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞, –ø–æ—Ç–æ–º –º–µ–Ω—è–µ—à—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º, –∏ –≤—Å—ë!
        –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚Äî —Ç–≤–æ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —Ç—Ä–æ–Ω—É—Ç.
*/
#include <iostream>

class PointND {
    short* coords {nullptr}; // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏
    size_t dims {0}; // —á–∏—Å–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    short error{0};
public:
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
    PointND() = default;
    PointND(short* cds, size_t len) : dims(len)
    {
        coords = new short[dims];
        for(size_t i = 0; i < dims; ++i)
            coords[i] = cds[i];
    }
    PointND(const PointND& other) : PointND(other.coords, other.dims)   // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        { }
    ~PointND() { delete[] coords; }

    // –ú–µ—Ç–æ–¥—ã
    size_t get_dims() const { return dims; }
    short& operator[](int x)
        { return (x < 0 || x > dims-1) ? error : coords[x]; }
    const PointND& operator=(const PointND& other)
    {
        if(this == &other) return *this;

        short* temp = new short[other.dims];
        for(size_t i = 0; i < other.dims; ++i)
            temp[i] = other.coords[i];

        delete[] coords;
        coords = temp;
        dims = other.dims;
        return *this;        
    }
    const PointND& operator++()
    {
        for(size_t i = 0; i < dims; ++i)
            ++coords[i];
        return *this;
    }
    const PointND& operator--()
    {
        for(size_t i = 0; i < dims; ++i)
            --coords[i];
        return *this;
    }
    PointND operator++(int)
    {
        PointND temp = *this;   // –Ω–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        for(size_t i = 0; i < dims; ++i)
            ++coords[i];
        return temp;
    }
    PointND operator--(int)
    {
        PointND temp = *this;   // –Ω–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        for(size_t i = 0; i < dims; ++i)
            --coords[i];
        return temp;
    }
    const PointND& operator+=(const PointND& other)
    {
        if(dims != other.dims) return *this;
        for(size_t i = 0; i < dims; ++i)
            coords[i] += other.coords[i];
        return *this;
    }
    const PointND& operator-=(const PointND& other)
    {
        if(dims != other.dims) return *this;
        for(int i = 0; i < dims; ++i)
            coords[i] -= other.coords[i];
        return *this;
    }

};

int main()
{
    short coords[] = {1, 2, 3, 4, 5};
    PointND pt(coords, 5);
    int indx{2};
    // –°–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç += –∏ -= –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–æ–≤ coords –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–≤–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π. 

    int val = pt[indx]; // –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É (–æ—Ç 0 –¥–æ dims-1); –µ—Å–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 0
    pt[indx] = val; // –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º indx –∑–Ω–∞—á–µ–Ω–∏—è val; –µ—Å–ª–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ –≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è
    PointND pt2, pt1;
    pt2 = pt1; // –≤ –æ–±—ä–µ–∫—Ç–µ pt2 —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–≤–æ–π –º–∞—Å—Å–∏–≤ coords —Å –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—ä–µ–∫—Ç–∞ pt1 (–ø–æ–ª–µ dims —Ç–∞–∫–∂–µ –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è)
    pt2++; // —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ 1
    ++pt2; // —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ 1
    pt1--; // —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ 1
    --pt1; // —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ 1
    pt += pt2; // –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º coords –æ–±—ä–µ–∫—Ç–∞ pt –ø—Ä–∏–±–∞–≤–ª—è—é—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ pt2
    pt -= pt2; // –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç coords –æ–±—ä–µ–∫—Ç–∞ pt –≤—ã—á–∏—Ç–∞—é—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ pt2

    return 0;
}