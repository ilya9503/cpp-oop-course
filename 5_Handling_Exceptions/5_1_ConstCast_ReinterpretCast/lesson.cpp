/*
    5.1 Операторы const_cast и reinterpret_cast

    Операции преобразования типов легко могут стать причинами трудноуловимых ошибок. Тем более что программисту здесь
        дается полная свобода действий, без каких-либо особых ограничений со стороны компилятора.

    И эту анархию решил хоть как-то ограничить разработчик языка C++ Бьерн Страуструп, введя для преобразования типов
        четыре новых оператора:
        const_cast – снимает или добавляет модификатор const (и volatile) для текущего типа данных;
        reinterpret_cast – преобразование одного типа в другой, с некоторой дополнительной проверкой со стороны компилятора на возможность указанного действия;
        static_cast – преобразование типов с учетом цепочки наследования классов или структур;
        dynamic_cast – преобразование типов с учетом цепочки наследования классов или структур в процессе выполнения программы (динамически).
*/

#include <iostream>

int main()
{

//    char * ptr = (char *)&a;    // приведение типа int* к char *
                                // смотрим побайтно содержимое любой переменной

/*    Оператор const_cast - снимает или добавляет модификатор const к текущему типу данных (только ссылки и указатели)      */
    int a;
    const int* ptr_a = &a;
    int* ptr = const_cast<int *>(ptr_a);                // убираем модификатор const
    const int* ptr_cnst = const_cast<const int *>(&a);  // добавляем модификатор const

    const double b = 10;
    const double& lnk_b_var = b;
    double& lnk_b = const_cast<double &>(lnk_b_var);                // снятие const
    const double& lnk_b_cnst = const_cast<const double &>(lnk_b);   // добавление const

    // оператор const_cast небезопасен. Следует избегать его использования

    /*  Оператор reinterpret_cast
        Во-первых, он применим все так же к указателям и ссылкам. С обычными переменными не работает
        Во-вторых, оператор reinterpret_cast не может снимать модификаторы const и volatile.
        Во всем остальном он похож на обычную операцию приведения типов языка Си.
            Преобразование типов между указателями
            Преобразование типов между ссылками
            Приведение типов между пользовательскими типами данных
    */


    return 0;
}