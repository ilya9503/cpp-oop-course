/*
    5.3 Обработка исключений. Введение
    Язык C++ имеет встроенный инструмент для обработки ошибок во время выполнения программы
    Глубина вызовов функций в основной программе может быть довольно большой.
    Как эта проблема решалась до появления механизма обработки исключений?
        Возврат специального значения из функции
        Специальные глобальные переменные
        Сложности при вызове методов объектов класса

    Оператор throw
        Если исключение не обрабатывается, вызывается std::terminate() - выводит сообщение в выходной поток
        После этого вызывается std::abort() - экстренное/аварийное завершение программы
    Операторы try/catch
        try — блок, в котором выполняется код, который может вызвать исключение.
        catch - блок для обработки исключений, выброшенных оператором throw

    lvalue-выражения связаны прямо или косвенно с областью памяти, которую можно воспринимать как переменную (что-либо заносить и считывать)
    rvalue-выражения связаны с областью памяти, хранящей временные значения и/или не связанной с какой-либо переменной (в любом ее проявлении)
*/

#include <iostream>

int perimetr_tr(int a, int b, int c)
{
    try {
        if(a < 0 || b < 0 || c < 0)
            throw -1;
    }
    catch(int x) {
        std::cout << x << std::endl;
        throw;  // исключение пробрасывается по стеку вызова функций (промежуточная обработка исключений)
    }

    //if(a < 0 || b < 0 || c < 0)
        //throw -1;

    if(a < 0 || b < 0 || c < 0 || a > b+c || b > a+c || c > a+b)
        throw "Error: a, b, c are not triangle lengths"; // проверка, является ли a b c стороной треугольника
        // работа функции завершается
 
    return a+b+c;
}



int main()
{
    try {
        int p = perimetr_tr(-5, 1, 2);
    }
    catch(const char *e)    // срабатывает только 1 блок
    {
        std::cout << e << std::endl;
    }
    catch(int) {
        std::cout << "Lengths must be positive digitals." << std::endl;
    }
    //  std::terminate();
    //  std::abort();


    return 0;
}