/*
    Stack (стек): быстрый, но маленький — для временных (локальных) переменных.
    Heap (куча): для динамически выделенной памяти (new, malloc) — ты сам управляешь временем жизни.
    Data/BSS сегменты: для всех static и global, живут на протяжении всей программы.

    Отличие глобальной переменной от static переменной — в области видимости, а не во времени жизни
        (оба живут всё время выполнения программы).
    static - видна только в пределах файла, функции в которой объявлена
    global - Объявлена вне всех функций и классов. Доступна из других файлов через extern.
        Видна во всей программе (во всех .cpp файлах, если явно подключена).
*/

#include <iostream>
 
void show_static()
{
    static int counter = 0;             // пример статической переменной
    std::cout << counter++ << std::endl;
}

int global_counter = 0; // глобальная и статическая переменная

class Point {
    static unsigned counter;    // только объявление, существует только в объектах
                                // единая для всех объектов данного класса
    int x, y;
public:

    Point() : x(0), y(0)
        { counter++; }
    // Статический метод. Похож на обычную функцию вне класса. Может обращаться только к статическим переменным класса
    static unsigned get_counter()
        { return counter; }     // не подставляет указатель this
};
 
unsigned Point::counter{0};     // объявим и инициализируем статическую переменную класса
 
int main()
{
    Point pt1, pt2;
    // к counter можно обращаться как из объекта, так и напрямую из класса
    std::cout << Point::get_counter() << std::endl;
    std::cout << pt2.get_counter() << std::endl;

    show_static();
    show_static();
    show_static();
 
    return 0;
}