/*
    2.1 Конструкторы. Конструктор по умолчанию. Перегрузка конструкторов

    Одно из положений ООП гласит:
        Программист не должен делать каких-либо предположений о внутреннем состоянии объекта.
        Поведение любого объекта должно быть предсказуемым.
    Отсутствие конструктора, нарушает это правило, переменные private находятся в неопределенном состоянии.
    Требуется инициализация
    По сути конструктор является одним из методов класса
    После размещения нового объекта в памяти устройства всегда автоматически вызывается специальный метод, который называется конструктор

    Конструкторы обладают следующими свойствами:
        имя конструктора всегда должно совпадать с именем типа данных, в нашем случае с именем класса Point2D;
        конструктор никогда не возвращает никаких значений, поэтому возвращаемый тип не прописывается;
        конструктор может иметь произвольное число параметров;
        конструктор всегда вызывается при создании каждого нового объекта.

    Константа может быть только инициализирована тем или иным значением. Присваивать ей значение нельзя

    В концепции ООП конструкторы, которые можно вызывать без параметров, называются конструкторами по умолчанию.
    Также этот тип конструктора вызывается при создании массива объектов 

    Если мы не прописываем свой собственный, то компилятор автоматически создает конструктор по умолчанию без параметров и с пустым телом,
     который не выполняет никаких действий и нужен лишь для сохранения общей логики создания объектов без передачи каких-либо аргументов
*/

#include <iostream>

class Point2D {
    const unsigned max_coord{100};          // можно инициализировать сразу в классе, без конструктора
    int x{0}, y{0};
 
public:
    Point2D() : max_coord(100), x(0), y(0)      // конструктор объекта (инициализатор) по умолчанию
        { std::cout << "Конструктор" << std::endl; }                                     // через : указывается список инициализации, по порядку
/*
    Point2D(int a = 0, int b = 0) : x(a), y(b)  // конструктор объекта по-умолчанию
        { }
*/
    void set_coords(int a, int b) 
        {x = a; y = b;}
    void get_coords(int& a, int& b)
        {a = x; b = y;}
};

int main()
{
    Point2D pt;
    Point2D* ptr_pt = new Point2D;
    Point2D ar_pt[5];   // массив объектов. Инициализируется конструктором по умолчанию

    int x, y;
 
    pt.get_coords(x, y);
    std::cout << x << " " << y << std::endl;
 
    ptr_pt->get_coords(x, y);
    std::cout << x << " " << y << std::endl;

    delete ptr_pt;

    return 0;
}