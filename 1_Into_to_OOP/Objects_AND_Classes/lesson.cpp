/*
    Лучше выделять память для объектов в куче:
    Обычно в программах предполагается создание большого числа объектов, которые, к тому же,
    должны существовать продолжительное время и быть доступны в разных частях программы.
    Как только необходимость в объекте пропадает, выделенную память нужно обязательно освободить

    Однако структуры – это исторически первый вариант объявления типов объектов
    С появлением в C++ ООП, как новой парадигмы, классы объектов предполагается описывать с помощью ключевого слова class
        по аналогии со структурами.

    Различия между классами и структурами:
        1. Все поля структуры по умолчанию являются публичными и доступны напрямую, извне
        2. Тогда, как поля класса по умолчанию приватны и недоступны вне класса

    Класс представляет собой тип данных, а не сами данные

    this - неявный указатель на объект

*/

#include <iostream>

// Для описания набора данных
struct Point {
    // по умолчанию публичны
    int x, y;
};

// Для описания объектов
class Point2D {
    // по умолчанию приватны (недоступны извне класса)
    int x, y;   // объявление, не формирование. У каждого объекта свои (приватные)
public:
    // Единый набор методов, для всех объектов класса
    void set_coords(int a, int b)   // сеттер для записи данных в приватное поле
        {x = a; y = b;}             // this->x = a; this->x = b; тоже самое подразумевается
    void get_coords(int& a, int& b) // геттер, для чтения данных приватного поля
        {a = x; b = y;}
};

int main()
{
    Point pt;                       // объект структуры Point, размещающийся в стековом фрейме
    Point* ptr_pt = new Point;      // объект структуры Point, размещающийся в куче (выделение и освобождение памяти)

    Point2D::set_coords;            // имя класса образует свою область видимости ::
    Point2D::set_coords(1,2);       // нельзя вызвать метод без привязки к объекту

    delete ptr_pt;                  // освобождаем память в куче

    return 0;
}