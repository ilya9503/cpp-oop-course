/*
    1.3 Режимы доступа public и private
    Отражает принцип инкапсуляции
    Вот в чем отличия приватной секции от публичной. И здесь важно понимать два момента:
        Ограничение доступа private и public работает на уровне классов, а не на уровне объектов.
        Ограничение доступа – это способ защиты программиста от возможного неправильного использования класса, а не от злоумышленников.

    Второе утверждение о защите программиста от возможных ошибок касается корректного (правильного) использования класса и его
        объектов в тексте программы. Если что-либо помещено в приватную секцию, то разработчик класса полагает обращение к этим элементам
        извне выполняется только через публичные методы класса, а не напрямую.
        Причем, приватными могут быть не только переменные, но и некоторые методы класса.
        Все, что находится в приватной зоне предназначено исключительно для внутреннего использования, но никак не для внешнего.
*/

#include <iostream>
#include <math.h>

class Point2D {
    int x, y;   // для использования только внутри класса
public:
    // Записываем данные в приватную зону
    void set_coords(int a, int b) 
        {x = a; y = b;}
    // Читаем данные из приватной зоны
    void get_coords(int& a, int& b)
        {a = x; b = y;}
    // Метод записи координат с контролем диапазона в приватную область класса
    bool set_coords_range(int a, int b, int min_coord = 0, int max_coord = 100)
    {
        if(a < min_coord || a > max_coord || b < min_coord || b > max_coord)
            return false;
        
        set_coords(a, b);
        return true;
    }
    // Передача аргумента типа этого же класса. Демонстрация ограничения доступа на уровне класса
    double length_to(const Point2D& pt)
    { 
            return sqrt((x-pt.x)*(x-pt.x) + (y-pt.y)*(y-pt.y)); 
    }
};

int main()
{
    Point2D pt, endp;
    
    pt.set_coords(1, 2);
    endp.set_coords(10, 20);
 
    double len = pt.length_to(endp);

    return 0;
}