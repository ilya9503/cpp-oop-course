/*
    Каждый файл (изменение) можно отдельным коммитом регистрировать
    Императивное программирование - последовательность команд (набор определенных операторов)
    Язык Си использует императивную парадигму (императив - приказ/команда)

    В парадигме ООП именно класс отвечает за порождение объектов определенного вида
    Класс в ООП выступает в роли схемы, чертежа, по которому конструируются объекты этого класса
    Каждый объект класса имеет свой независимый набор данных и общий набор методов, через которые происходит взаимодействие с этим объектом

    То есть, каждый объект превращается в активный элемент программы, в котором выполняется логика работы алгоритма,
        описанная в классе этого объекта. Таким образом, класс выступает независимой единицей программного кода,
        в котором реализован определенный фрагмент.

    Инкапсуляция - ограничение доступа к переменным и методам класса
    То есть, определяя тот или иной класс, программист разрешает взаимодействие с ним через публичные разрешенные методы
        и реже напрямую через данные

    А теперь самое главное, что ООП делает по-настоящему новой парадигмой программирования, а не просто описанием программы
    на уровне независимых объектов.
    Новые классы можно определять на основе других, ранее сформированных классов.
    В концепции ООП это называется наследованием классов. При этом классы, от которых происходит наследование, получили название базовых,
        а новые сформированные – дочерних.

    парадигма ООП, основанная на трех базовых элементах:

        инкапсуляции – обеспечение целостности данных и их обработки;
        наследовании – образование одних классов из других;
        полиморфизма – взаимодействие с тем или иным дочерним классом через базовый класс.
*/

#include <iostream>


class RoundDial {
    unsigned radius; // размер циферблата
    unsigned color; // цвет циферблата
 
public:
// Также с каждым объектом, помимо данных, могут быть еще связаны специальные функции, именуемые методами
// Как правило, именно через них происходит взаимодействие с объектами
    void update(); 
    void set_color(unsigned);
    void set_radius(unsigned);
};

int main()
{
    RoundDial rd1, rd2, rd3;
    return 0;
}