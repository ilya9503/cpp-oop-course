/*
    Ключевые слова override, final. Виртуальные деструкторы
    Как правило, виртуальные методы объявляются с целью их переопределения в дочерних классах
    В Java все методы виртуальные по-умолчанию
    При этом сигнатура переопределяемого метода должна четко соблюдаться.

    Переопределяемые виртуальные методы следует помечать ключевым словом override
        Это требуется для того, чтобы компилятор отслеживал ошибки при переопределении virtual методов

    Ключевое слово final ставится в случае множественного (иерархического) наследования
        Если в следующих классах-потомках следует запретить переопределение метода

    Деструкторы базового и дочернего классов следует помечать virtual

    И если мы знаем, что класс предполагается использовать при наследовании, то его деструктор лучше сразу помечать, как виртуальный,
        даже если он ничего не делает. Иначе мы рискуем не вызвать деструктор дочернего класса, а это уже может быть критично. Вообще, если класс имеет хотя бы один виртуальный метод, то его деструктор следует делать виртуальным.
*/

#include <iostream>

class GeomBase {
protected:
    int x0{0}, y0{0}, x1{0}, y1{0};
public:
    virtual ~GeomBase() { puts("Delete: GeomBase"); }
    void set_coords(int x0, int y0, int x1, int y1)
    {
        this->x0 = x0; this->y0 = y0;
        this->x1 = x1; this->y1 = y1;
    }
 
    virtual void draw() const
    {
        printf("GeomBase: %d, %d, %d, %d\n", x0, y0, x1, y1);
    }    
};
 
class Line : public GeomBase {
private:
    double length{0.0};
public:
    ~Line() { puts("Delete: Line"); }
    virtual void draw() const override
    {
        printf("Line: %d, %d, %d, %d\n", x0, y0, x1, y1);
    }
};

int main()
{
    Line* ptr_ln = new Line;
    GeomBase* ptr_b = ptr_ln;
 
    ptr_ln->draw();
    ptr_b->draw();
 
    delete ptr_ln;
    return 0;
}