/*
    Mixin ‚Äî —ç—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∫–ª–∞—Å—Å –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥—Ä—É–≥–∏–º –∫–ª–∞—Å—Å–∞–º –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        –æ—Ç –æ–±—â–µ–≥–æ –ø—Ä–µ–¥–∫–∞.
    –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç ¬´—Å–º–µ—à–∏–≤–∞—Ç—å¬ª –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

    –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤ C++ –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å.
    üîπ –ü—Ä–æ–±–ª–µ–º–∞ –±–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
    –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∏ –≤—ã —É–¥–∞–ª—è–µ—Ç–µ –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å, –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ –≤—ã–∑–æ–≤–µ—Ç—Å—è
        , –µ—Å–ª–∏ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω –∫–∞–∫ virtual.
    üëâ –≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —É—Ç–µ—á–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –Ω–µ–ø–æ–ª–Ω–æ–º—É —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—é –æ–±—ä–µ–∫—Ç–∞.

    –í—Å–µ–≥–¥–∞ –¥–µ–ª–∞–π—Ç–µ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –≤ –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–∞—Ö —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.
    –í –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö) –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –∏ —á–∞—Å—Ç–æ = default –∏–ª–∏ = 0.
*/

#include <iostream>
#include <string>

enum request_method { // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã
    method_get = 1,     // –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
    method_post = 2,    // —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    method_put = 3,     // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    method_delete = 4   // —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
};

struct Request { // –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
    request_method method {method_get};
    std::string url;
    std::string data;
};

class RetriveMixin {
    request_method method{ method_get };
public:
    RetriveMixin(request_method* ms, int index) { ms[index] = method; }
    virtual ~RetriveMixin() { }
    std::string get(const Request& request) { return "GET: " + request.url; }
};

class CreateMixin {
    request_method method{ method_post };
protected:
    int test{0};
public:
    CreateMixin(request_method* ms, int index) { ms[index] = method; }
    virtual ~CreateMixin() { }
    std::string post(const Request& request) { return "POST: " + request.url; }
};

class UpdateMixin {
    request_method method{ method_put };
public:
    UpdateMixin(request_method* ms, int index) { ms[index] = method; }
    virtual ~UpdateMixin() { }
    std::string put(const Request& request) { return "PUT: " + request.url; }
};

// –∑–¥–µ—Å—å –æ–±—ä—è–≤–ª—è–π—Ç–µ –∫–ª–∞—Å—Å GeneralView
class GeneralView : public RetriveMixin, public CreateMixin {
private:
    enum { max_methods = 4 }; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    int count_methods{ 0 }; // —á–∏—Å–ª–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    request_method allowed_methods[max_methods]{ method_get, method_post }; // –º–∞—Å—Å–∏–≤ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
private:
    bool is_method_exists(request_method method) // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ method –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ allowed_methods, –∏–Ω–∞—á–µ false
    {
        bool res{false};
        for(int i=0; i < max_methods; ++i)
            if(allowed_methods[i] == method) res |= 1;
        return res;
    }
public:
    GeneralView(request_method* methods_ar) : RetriveMixin(methods_ar, 0), CreateMixin(methods_ar, 1), count_methods(2)
        {  }
    ~GeneralView() { }
    std::string render_request(const Request& request)
    {
        std::string res;
        if(is_method_exists(request.method)) {
            if(request.method == method_get)
                res = get(request);
            else
                res = post(request);
        }

        return res;   
    }
};

int main(void)
{
    // –∑–¥–µ—Å—å –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é main
    request_method methods_ar[2];
    GeneralView gw(methods_ar);
    Request r { method_post,
                "https://proproprogs.ru/cpp_oop/cpp-oop-mnozhestvennoe-nasledovanie-poryadok-vyzova-konstruktorov-i-destruktorov",
                "<h1>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ</h1>"
    };
    std::string res = gw.render_request(r);
    std::cout << res;
    //__ASSERT_TESTS__ // –º–∞–∫—Ä–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ —É–±–∏—Ä–∞—Ç—å –∏ –¥–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ return 0 –∏–ª–∏ –ø–µ—Ä–µ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏)

    return 0;
}